Metadata-Version: 2.1
Name: asyncpraw
Version: 7.7.1
Summary: Async PRAW, an abbreviation for "Asynchronous Python Reddit API Wrapper", is a python package that allows for simple access to Reddit's API.
Author: Joel Payne
Author-email: lilspazjoekp@gmail.com
License: Simplified BSD License
Project-URL: Change Log, https://asyncpraw.readthedocs.io/en/latest/package_info/change_log.html
Project-URL: Documentation, https://asyncpraw.readthedocs.io/
Project-URL: Issue Tracker, https://github.com/praw-dev/asyncpraw/issues
Project-URL: Source Code, https://github.com/praw-dev/asyncpraw
Keywords: reddit api wrapper asyncpraw praw async asynchronous
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Utilities
Requires-Python: >=3.7
License-File: LICENSE.txt
License-File: AUTHORS.rst
Requires-Dist: aiofiles (<1)
Requires-Dist: aiohttp (<4)
Requires-Dist: aiosqlite (<=0.17.0)
Requires-Dist: asyncprawcore (<3,>=2.1)
Requires-Dist: update-checker (>=0.18)
Provides-Extra: ci
Requires-Dist: coveralls ; extra == 'ci'
Provides-Extra: dev
Requires-Dist: packaging ; extra == 'dev'
Requires-Dist: pre-commit ; extra == 'dev'
Requires-Dist: sphinx ; extra == 'dev'
Requires-Dist: sphinx-rtd-dark-mode ; extra == 'dev'
Requires-Dist: sphinx-rtd-theme ; extra == 'dev'
Requires-Dist: sphinxcontrib-trio ; extra == 'dev'
Requires-Dist: mock (==4.*) ; extra == 'dev'
Requires-Dist: pytest (==7.*) ; extra == 'dev'
Requires-Dist: pytest-asyncio (==0.18.*) ; extra == 'dev'
Requires-Dist: pytest-vcr (==1.*) ; extra == 'dev'
Requires-Dist: testfixtures (==6.*) ; extra == 'dev'
Requires-Dist: urllib3 (==1.*) ; extra == 'dev'
Requires-Dist: vcrpy (==4.2.1) ; extra == 'dev'
Requires-Dist: asynctest (==0.13.*) ; (python_version < "3.8") and extra == 'dev'
Provides-Extra: lint
Requires-Dist: pre-commit ; extra == 'lint'
Requires-Dist: sphinx ; extra == 'lint'
Requires-Dist: sphinx-rtd-dark-mode ; extra == 'lint'
Requires-Dist: sphinx-rtd-theme ; extra == 'lint'
Requires-Dist: sphinxcontrib-trio ; extra == 'lint'
Provides-Extra: readthedocs
Requires-Dist: sphinx ; extra == 'readthedocs'
Requires-Dist: sphinx-rtd-dark-mode ; extra == 'readthedocs'
Requires-Dist: sphinx-rtd-theme ; extra == 'readthedocs'
Requires-Dist: sphinxcontrib-trio ; extra == 'readthedocs'
Provides-Extra: test
Requires-Dist: mock (==4.*) ; extra == 'test'
Requires-Dist: pytest (==7.*) ; extra == 'test'
Requires-Dist: pytest-asyncio (==0.18.*) ; extra == 'test'
Requires-Dist: pytest-vcr (==1.*) ; extra == 'test'
Requires-Dist: testfixtures (==6.*) ; extra == 'test'
Requires-Dist: urllib3 (==1.*) ; extra == 'test'
Requires-Dist: vcrpy (==4.2.1) ; extra == 'test'
Requires-Dist: asynctest (==0.13.*) ; (python_version < "3.8") and extra == 'test'

Async PRAW: The Asynchronous Python Reddit API Wrapper
======================================================

.. image:: https://img.shields.io/pypi/v/asyncpraw.svg
    :alt: Latest Async PRAW Version
    :target: https://pypi.python.org/pypi/asyncpraw

.. image:: https://img.shields.io/pypi/pyversions/asyncpraw
    :alt: Supported Python Versions
    :target: https://pypi.python.org/pypi/asyncpraw

.. image:: https://img.shields.io/pypi/dm/asyncpraw
    :alt: PyPI - Downloads - Monthly
    :target: https://pypi.python.org/pypi/asyncpraw

.. image:: https://coveralls.io/repos/github/praw-dev/asyncpraw/badge.svg?branch=master
    :alt: Coveralls Coverage
    :target: https://coveralls.io/github/praw-dev/asyncpraw?branch=master

.. image:: https://github.com/praw-dev/asyncpraw/workflows/CI/badge.svg
    :alt: GitHub Actions Status
    :target: https://github.com/praw-dev/asyncpraw/actions?query=branch%3Amaster

.. image:: https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg
    :alt: Contributor Covenant
    :target: https://github.com/praw-dev/.github/blob/main/CODE_OF_CONDUCT.md

.. image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white
    :alt: pre-commit
    :target: https://github.com/pre-commit/pre-commit

Async PRAW, an abbreviation for "Asynchronous Python Reddit API Wrapper", is a Python
package that allows for simple access to Reddit's API. Async PRAW aims to be easy to use
and internally follows all of `Reddit's API rules
<https://github.com/reddit/reddit/wiki/API>`_. With Async PRAW there's no need to
introduce ``sleep`` calls in your code. Give your client an appropriate user agent and
you're set.

.. _installation:

Installation
------------

Async PRAW is supported on Python 3.7+. The recommended way to install Async PRAW is via
`pip <https://pypi.python.org/pypi/pip>`_.

.. code-block:: bash

    pip install asyncpraw

To install the latest development version of Async PRAW run the following instead:

.. code-block:: bash

    pip install --upgrade https://github.com/praw-dev/asyncpraw/archive/master.zip

For instructions on installing Python and pip see "The Hitchhiker's Guide to Python"
`Installation Guides <https://docs.python-guide.org/en/latest/starting/installation/>`_.

Quickstart
----------

Assuming you already have a credentials for a script-type OAuth application you can
instantiate an instance of Async PRAW like so:

.. code-block:: python

    import asyncpraw

    reddit = asyncpraw.Reddit(
        client_id="CLIENT_ID",
        client_secret="CLIENT_SECRET",
        password="PASSWORD",
        user_agent="USERAGENT",
        username="USERNAME",
    )

With the ``reddit`` instance you can then interact with Reddit:

.. code-block:: python

    # Create a submission to r/test
    subreddit = await reddit.subreddit("test")
    await subreddit.submit("Test Submission", url="https://reddit.com")

    # Comment on a known submission
    submission = await reddit.submission(
        url="https://www.reddit.com/comments/5e1az9", fetch=False
    )
    await submission.reply("Super rad!")

    # Reply to the first comment of a weekly top thread of a moderated community
    subreddit = await reddit.subreddit("mod")
    async for submission in subreddit.top(time_filter="week"):
        comments = await submission.comments()
        await comments[0].reply("An automated reply")

    # Output score for the first 256 items on the frontpage
    async for submission in reddit.front.hot(limit=256):
        print(submission.score)

    # Obtain the moderator listing for r/test
    subreddit = await reddit.subreddit("test")
    async for moderator in subreddit.moderator:
        print(moderator)

Please see Async PRAW's `documentation <https://asyncpraw.readthedocs.io/>`_ for more
examples of what you can do with Async PRAW.

Async PRAW Discussion and Support
---------------------------------

For those new to Python, or would otherwise consider themselves a Python beginner,
please consider asking questions on the `r/learnpython
<https://www.reddit.com/r/learnpython>`_ subreddit. There are wonderful people there who
can help with general Python and simple Async PRAW related questions.

Otherwise, there are a few official places to ask questions about Async PRAW:

`r/redditdev <https://www.reddit.com/r/redditdev>`_ is the best place on Reddit to ask
Async PRAW related questions. This subreddit is for all Reddit API related discussion so
please tag submissions with *[Async PRAW]*. Please perform a search on the subreddit
first to see if anyone has similar questions.

Real-time chat can be conducted via the `PRAW Slack Organization
<https://join.slack.com/t/praw/shared_invite/enQtOTUwMDcxOTQ0NzY5LWVkMGQ3ZDk5YmQ5MDEwYTZmMmJkMTJkNjBkNTY3OTU0Y2E2NGRlY2ZhZTAzMWZmMWRiMTMwYjdjODkxOGYyZjY>`_
(please create an issue if that invite link has expired).

Please do not directly message any of the contributors via Reddit, email, or Slack
unless they have indicated otherwise. We strongly encourage everyone to help others with
their questions.

Please file bugs and feature requests as issues on `GitHub
<https://github.com/praw-dev/asyncpraw/issues>`_ after first searching to ensure a
similar issue was not already filed. If such an issue already exists please give it a
thumbs up reaction. Comments to issues containing additional information are certainly
welcome.

.. note::

    This project is released with a `Contributor Code of Conduct
    <https://github.com/praw-dev/.github/blob/main/CODE_OF_CONDUCT.md>`_. By
    participating in this project you agree to abide by its terms.

Documentation
-------------

Async PRAW's documentation is located at https://asyncpraw.readthedocs.io/.

History
-------

`February 2019
<https://github.com/praw-dev/asyncpraw/commit/55480eb3d59dc7bc3d1480d83b98c95effc77181>`_:
Joel forked PRAW and began work on Async PRAW, an asynchronous compatible version of
PRAW.

`July 2020
<https://github.com/praw-dev/asyncpraw/commit/b8b8a4bf3618639968e8be379e85e2ff84f2307a>`_:
Async PRAW was moved into the praw-dev namespace.

License
-------

Async PRAW's source (v7.1.1+) is provided under the `Simplified BSD License
<https://github.com/praw-dev/asyncpraw/blob/30796acc29b4ba2335cf0eab414477702c29452f/LICENSE.txt>`_.

- Copyright Â©, 2020, Joel Payne
